//
//  PiwikTracker.h
//  PiwikTracker
//
//  Created by Mattias Levin on 11/19/11.
//  Copyright 2011 Mattias Levin. All rights reserved.
//

#import <Foundation/Foundation.h>

@protocol PiwikTrackerDelegate;
@class PTEvent;


/**
 A PiwikTracker framework in Objective-C.
 
 Howto
 1. Request the shared tracker 
 2. Start the tracking
 3. Log pageviews (pageviews are stored in a locally persisted queue)
 4. Dispatch all pageviews in the queue to the Piwik server
 5. An optional delegate is informed about the progress
 
 If the request to the Piwik server fails the delegate is informed an appropriate action can be taken.
 Three different delegate implentations are provided implementing different strategies. They can be used as it or futher customised.
 
 */
@interface PiwikTracker : NSObject {
}


/**
 Get the shared tracker.
 @return Shared Piwik tracker singletone object.
 */
+ (PiwikTracker*)sharedTracker;

/**
 Start the tracker. Start the tracker is the same a starting a new visit, typically each time the application is started or any other place relevant for the application context.
 @param piwikURL The url to the Piwik server.
 @param siteID The site id of the Piwik project.
 @param authenticationToken The token must be either the Super User token, or a user with "admin" permission for this website ID. This token is needed in order to override the IP address, date and time of the event otherwise generated by the Piwik server when the event is received. Set the value to nil to use the values generated by the Piwik server.
 @param delegate An optional delegate that gets notified of the progress of dispatching events to the Piwik server. The delegate must implement the PiwikTrackerDelegate protocol.
 @param error An optional error message
 @return YES if the tracking was initialized successfully, otherwise NO together with an error message.
 */
- (BOOL)startTrackerWithPiwikURL:(NSString*)piwikURL 
                          siteID:(NSString*)siteID 
             authenticationToken:(NSString*)authenticationToken
                        delegate:(id<PiwikTrackerDelegate>)delegate
                       withError:(NSError**)error;


/**
 Stop the trackinger. Ends the visit, typically when the application is terminated or any other place relevant for the application context. 
 */
- (void)stopTracker;

/**
 Track a single pageview.
 @param pageName The page title to track.
 @param error An optional error message
 @return YES if the page view was stored in the local queue, otherwise NO together with an error message.
 */
- (BOOL)trackPageview:(NSString*)pageName withError:(NSError**)error;

/**
 Track a goal conversion
 @param goal The goal to record a convertion for
 @param error An optional error message
 @return YES if the goal was stored in the local queue, otherwise NO together with an error message.
 */
- (BOOL)trackGoal:(NSInteger)goal withError:(NSError**)error;

/**
 Track a goal conversion with a specific revenue
 @param goal The goal to record a convertion for
 @param revenue The revenue for this conversion
 @param error An optional error message
 @return YES if the goal was stored in the local queue, otherwise NO together with an error message.
 */
- (BOOL)trackGoal:(NSInteger)goal withRevenue:(double)revenue withError:(NSError**)error;


/**
 Dispatch all tracked events currently stored in the queue to the Piwik server. Stored events are sent asynchroneously to the server and this method return immediatly. If a delegate has been configured, it will be informed about the dispatch progress.
 @return YES if the dispatch was succesfuly started, otherwise NO together with an error message.
 */
- (BOOL)dispatch;

/**
 Method for deleting all events in the queue.
 */
- (void)emptyQueue;


/**
 Returns if the tracker is currently tracking or not
 */
@property (readonly) BOOL isTracking;

/**
 An optional delegate for monitoring the dispatch progress.
 */
@property (retain, nonatomic) id<PiwikTrackerDelegate> delegate;

/**
 The visitor id is is used to track a unique user. The visitor id is generated the first the app is started and reused in all subsequent events. If the application is uninstalled and installed again a new id is generated. Normally there is not reason to change this value. 
 */
@property (retain, nonatomic) NSString *visitorID ;

/**
 The user-agent profile sent to the Piwik server. The user agent is read from the platform dynamically. Normally there is not reason to change this value.
 */
@property (retain, nonatomic) NSString *userAgent;

/**
 The sample rate controlls the probability that the event will be sampled and thus sent to the Piwik server. The value must an integer between 0 and 100. The default value is 100 indicating that no samlping will be peformed and all events will be sent to the Piwik server. 90 means that there is a 90% probabilty that the event will be sent.
 Use this if your application is generating many events to reduce load in the application and Piwik server.
 */
@property (nonatomic) NSInteger sampleRate;

/**
 If dry run is set to YES, events will not be sent to the Piwik server but logged to the console for testing and debugging purpose.
 */
@property (nonatomic) BOOL dryRun;

/**
 Allows the Piwik server to detect the users country if GeoIP is not enabled. This value is set default to the device current locale language code. Normally there is not reason to change this value unless the application have a better way to detect the language.
 */
@property (retain, nonatomic) NSString* acceptLanguage;


@end



/**
 A protocol that the Piwik tracker delegate can implement to track the progress of dispatching events to the server.
 */
@protocol PiwikTrackerDelegate <NSObject>

@optional // All delegate methods are optional

/**
 Called when a new event has been queued.
 @param event The event that was queued
 @param numberOfQueuedEvents The total number of events current queued
 */
- (void)piwikTrackerQueueEventDidComplete:(PTEvent*)event numberOfQueuedEvents:(NSNumber*)numberOfQueuedEvents;

/**
 Called when a new event failed to be put in the queue.
 @param event The event that was queued
 @param error An optional error message
 */
- (void)piwikTrackerQueueEventDidFail:(PTEvent*)event withError:(NSError*)error;

/**
 Called when all events in the queue have been sent to the Piwik server.
 @param tracker The shared piwik tracker singleton
 */
- (void)piwikTrackerDispatchDidComplete:(PiwikTracker*)tracker;

/**
 Called when a request to the Piwik server fails.
 @param tracker The shared piwik tracker singleton
 @param error An optional error message
 */
- (void)piwikTrackerDispatchDidFail:(PiwikTracker*)tracker withError:(NSError*)error;

@end





